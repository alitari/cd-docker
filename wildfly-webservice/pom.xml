<?xml version="1.0"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.alexkrieg</groupId>
	<artifactId>wildfly-webservice</artifactId>
	<version>1-${build.number}</version>
	<packaging>war</packaging>
	<name>wildfly-webservice</name>
	<description>Hello World JAX-WS Web service</description>


	<properties>

		<!-- services -->
		<dockerHostIp>localhost</dockerHostIp>
		<dockerPort>2376</dockerPort>

		<wshost>${dockerHostIp}</wshost>
		<wsport>8888</wsport>

		<!-- docker image -->
		<image.registryHost>${dockerHostIp}:5000/</image.registryHost>
		<image.namespace>alitari/</image.namespace>
		<image.repository>wildfly-webservice</image.repository>
		<image.version>${project.version}</image.version>

		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- JBOSS -->
		<version.wildfly.maven.plugin>1.0.2.Final</version.wildfly.maven.plugin>
		<version.jboss.bom>8.2.1.Final</version.jboss.bom>
		<version.arquillian.container>8.0.0.Final</version.arquillian.container>

		<!-- Java -->
		<version.war.plugin>2.5</version.war.plugin>
		<version.compiler.plugin>3.1</version.compiler.plugin>
		<version.surefire.plugin>2.12.4</version.surefire.plugin>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>

		<sonar.host.url>http://${dockerHostIp}:9000</sonar.host.url>
		<sonar.jdbc.url>jdbc:postgresql://${dockerHostIp}:5432/sonar</sonar.jdbc.url>

	</properties>


	<pluginRepositories>
		<pluginRepository>
			<id>smartbear-sweden-plugin-repository</id>
			<url>http://www.soapui.org/repository/maven2/</url>
		</pluginRepository>
	</pluginRepositories>

	<distributionManagement>
		<repository>
			<id>releases</id>
			<url>http://${dockerHostIp}:8081/content/repositories/releases/</url>
		</repository>
	</distributionManagement>




	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.wildfly.bom</groupId>
				<artifactId>jboss-javaee-7.0-with-tools</artifactId>
				<version>${version.jboss.bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>


		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
			<scope>provided</scope>
		</dependency>

	</dependencies>

	<build>

		<!-- Set the name of the war, used as the context root when the app is 
			deployed -->
		<finalName>${project.artifactId}</finalName>
		<plugins>

			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<executions>
					<execution>
						<id>copy-docker</id>
						<!-- here the phase you need -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<resources>
								<resource>
									<directory>docker</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-main-resources</id>
						<!-- here the phase you need -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/classes</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<manifest>
						<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						<addClasspath>true</addClasspath>
					</manifest>
					<archive>
						<manifestEntries>
							<Specification-Title>${project.name}</Specification-Title>
							<Specification-Version>${project.version}</Specification-Version>
							<Implementation-Version>${git.commit}</Implementation-Version>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.jolokia</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.13.7</version>
				<configuration>
					<logDate>default</logDate>
					<autoPull>true</autoPull>
					<dockerHost>tcp://${dockerHostIp}:${dockerPort}</dockerHost>
					<images>
						<image>
							<alias>server</alias>
							<name>${image.registryHost}${image.namespace}${image.repository}:${image.version}</name>
							<build>
								<assembly>
									<dockerFileDir>${project.build.directory}</dockerFileDir>
								</assembly>
							</build>

							<run>
								<ports>
									<port>${wsport}:8080</port>
								</ports>
								<wait>
									<!-- The plugin waits until this URL is reachable via HTTP ... -->
<!-- 									<log>WFLYSRV0025: WildFly Full 9.0.1.Final (WildFly Core 1.0.1.Final) started</log> -->
<!-- 									<http> -->
<!-- 										<url>http://${wshost}:${wsport}</url> -->
<!-- 										<method>GET</method> -->
<!-- 									</http> -->
									<time>30000</time>
									<shutdown>500</shutdown>
								</wait>
								<log>
									<enabled>true</enabled>
									<color>red</color>
								</log>
							</run>
						</image>
					</images>
				</configuration>
				<!-- Connect this plugin to the maven lifecycle around the integration-test 
					phase. I.e. start the container in pre-integration-test and stop it in post-integration-test. -->
				<executions>
					<execution>
						<id>start</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>build</goal>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
					<execution>
						<id>push</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
							<goal>remove</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- the plugin supports both OSS and PRO versions of SoapUI -->

			<plugin>
				<groupId>com.github.redfish4ktc.soapui</groupId>
				<artifactId>maven-soapui-extension-plugin</artifactId>
				<version>4.6.4.2</version>
				<configuration>
					<projectFile>${project.build.directory}/test-classes/helloworldws-soapui-project.xml</projectFile>
					<junitReport>true</junitReport>
					<exportwAll>true</exportwAll>
					<printReport>false</printReport>
					<testFailIgnore>true</testFailIgnore>
					<globalProperties>
						<value>wshost=${wshost}</value>
						<value>wsport=${wsport}</value>
						<value>wsname=${project.artifactId}</value>
					</globalProperties>
				</configuration>
				<executions>
					<execution>
						<id>start</id>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
					<execution>
						<id>test-verify</id>
						<phase>verify</phase>
						<goals>
							<goal>test-verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>2.3</version>
			</plugin>
		</plugins>
	</build>



</project>

