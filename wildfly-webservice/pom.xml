<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<artifactId>wildfly-webservice</artifactId>
	<packaging>war</packaging>
	<name>wildfly-webservice</name>
	<description>Hello World JAX-WS Web service</description>

	<parent>
		<groupId>de.alexkrieg</groupId>
		<version>1.0-${buildNumber}</version>
		<artifactId>cd-docker</artifactId>
	</parent>



	<properties>

		<!-- services -->

		<wshost>${qaDockerHostIp}</wshost>
		<wsport>8888</wsport>

		<!-- docker image -->
		<image.repository>${project.artifactId}</image.repository>
		<image.version>${project.version}</image.version>

		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- JBOSS -->
		<version.wildfly.maven.plugin>1.0.2.Final</version.wildfly.maven.plugin>
		<version.jboss.bom>9.0.0.Beta2</version.jboss.bom>
		<version.arquillian.container>8.0.0.Final</version.arquillian.container>
		<version.arquillian_core>1.1.10.Final</version.arquillian_core>

		<!-- Java -->
		<version.war.plugin>2.5</version.war.plugin>
		<version.compiler.plugin>3.1</version.compiler.plugin>
		<version.surefire.plugin>2.12.4</version.surefire.plugin>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>

	</properties>


	<pluginRepositories>
		<pluginRepository>
			<id>smartbear-sweden-plugin-repository</id>
			<url>http://www.soapui.org/repository/maven2/</url>
		</pluginRepository>
	</pluginRepositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.wildfly.bom</groupId>
				<artifactId>jboss-javaee-7.0-with-tools</artifactId>
				<version>${version.jboss.bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.arquillian</groupId>
				<artifactId>arquillian-bom</artifactId>
				<version>${version.arquillian_core}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>

		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JPA API, we use provided scope as the API is included in 
			WildFly -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.1-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.2.2.Final</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JAX-RS API, we use provided scope as the API is included 
			in WildFly -->
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_2.0_spec</artifactId>
			<version>1.0.0.Final</version>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JSON API to build JSON Objects -->
		<dependency>
			<groupId>org.jboss.spec.javax.json</groupId>
			<artifactId>jboss-json-api_1.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jackson2-provider</artifactId>
			<version>3.0.14.Final</version>
			<scope>provided</scope>
		</dependency>


		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>4.3.11.Final</version>
			<scope>provided</scope>
		</dependency>


		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.3</version>
		</dependency>

		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
			<version>3.2.1</version>
		</dependency>


		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>3.3.0</version>
			<scope>test</scope>
		</dependency>


		<dependency>
			<groupId>org.needle4j</groupId>
			<artifactId>needle4j</artifactId>
			<scope>test</scope>
			<version>2.3</version>
		</dependency>


		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.6.4</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>4.3.11.Final</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>2.2.8</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.spockframework</groupId>
			<artifactId>spock-core</artifactId>
			<version>1.0-groovy-2.4</version>
			<scope>test</scope>
		</dependency>
		<!-- Optional dependencies for using Spock -->
		<dependency> <!-- use a specific Groovy version rather than the one specified by spock-core -->
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<scope>test</scope>
			<version>2.4.1</version>
		</dependency>
		<dependency> <!-- enables mocking of classes (in addition to interfaces) -->
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>3.1</version>
			<scope>test</scope>
		</dependency>
		<dependency> <!-- enables mocking of classes without default constructor (together with 
				CGLIB) -->
			<groupId>org.objenesis</groupId>
			<artifactId>objenesis</artifactId>
			<version>2.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy.modules.http-builder</groupId>
			<artifactId>http-builder</artifactId>
			<version>0.7.1</version>
		</dependency>

		<dependency>
			<groupId>com.github.groovy-wslite</groupId>
			<artifactId>groovy-wslite</artifactId>
			<version>1.1.2</version>
		</dependency>



	</dependencies>

	<build>

		<!-- Set the name of the war, used as the context root when the app is 
			deployed -->
		<finalName>${project.artifactId}</finalName>
		<plugins>

			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<executions>
					<execution>
						<id>copy-docker</id>
						<!-- here the phase you need -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<resources>
								<resource>
									<directory>docker</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-main-resources</id>
						<!-- here the phase you need -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/classes</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.18.1</version>
				<configuration>
					<!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
					<testSourceDirectory>src/test/java</testSourceDirectory>
				</configuration>
			</plugin>


			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<manifest>
						<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						<addClasspath>true</addClasspath>
					</manifest>
					<archive>
						<manifestEntries>
							<Specification-Title>${project.name}</Specification-Title>
							<Specification-Version>${project.version}</Specification-Version>
							<Implementation-Version>${git.commit}</Implementation-Version>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.5.201505241946</version>
				<executions>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>surefireArgLine</propertyName>
							<excludes>
								<exclude>db/migration/*.class</exclude>
								<exclude>**/IntializerBean.class</exclude>
								<exclude>de/alexkrieg/persontracker/ws/**/*.class</exclude>
								<exclude>de/alexkrieg/persontracker/rest/**/*.class</exclude>
								<exclude>**/Resources.class</exclude>
							</excludes>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>

					<!-- Ensures that the code coverage report for integration tests after 
						integration tests have been run. -->
					<execution>
						<id>post-integration-test</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>dump</goal>
						</goals>
						<configuration>
							<address>${qaDockerHostIp}</address>
							<destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>
							<excludes>
								<exclude>db/migration/*.class</exclude>
								<exclude>**/IntializerBean.class</exclude>
								<exclude>**/Resources.class</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- The gmavenplus plugin is used to compile Groovy code. To learn more 
					about this plugin, visit https://github.com/groovy/GMavenPlus/wiki -->
				<groupId>org.codehaus.gmavenplus</groupId>
				<artifactId>gmavenplus-plugin</artifactId>
				<version>1.4</version>
				<executions>
					<execution>
						<goals>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.jolokia</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.13.7</version>
				<configuration>
					<logDate>default</logDate>
					<autoPull>true</autoPull>
					<dockerHost>tcp://${qaDockerHostIp}:${qaDockerPort}</dockerHost>
					<certPath>${qaDockerCertPath}</certPath>
					<images>
					    <image>
							<alias>postgres</alias>
							<name>postgres</name>
							<run>
								<ports>
									<port>5555:5432</port>
								</ports>
								<env>
                                   <POSTGRES_PASSWORD>postgres</POSTGRES_PASSWORD>
                                </env>
								<wait>
									<time>1000</time>
									<shutdown>500</shutdown>
								</wait>
								<log>
									<enabled>false</enabled>
								</log>
							</run>
						</image>
						<image>
							<alias>app</alias>
							<name>${image.registryHost}${image.namespace}${image.repository}:${image.version}</name>
							<build>
								<assembly>
									<dockerFileDir>${project.build.directory}</dockerFileDir>
								</assembly>
							</build>

							<run>
								<ports>
									<port>${wsport}:8080</port>
									<port>6300:6300</port>

								</ports>
								<env>
									<DBHOST>${qaDockerHostIp}</DBHOST>
								</env>
								<wait>
									<!-- The plugin waits until this URL is reachable via HTTP ... -->
									<!-- <log>WFLYSRV0025: WildFly Full 9.0.1.Final (WildFly Core 1.0.1.Final) 
										started</log> -->
									<!-- <http> -->
									<!-- <url>http://${wshost}:${wsport}</url> -->
									<!-- <method>GET</method> -->
									<!-- </http> -->
									<time>60000</time>
									<shutdown>500</shutdown>
								</wait>
								<log>
									<enabled>true</enabled>
									<color>red</color>
								</log>
							</run>
						</image>
					</images>
				</configuration>
				<!-- Connect this plugin to the maven lifecycle around the integration-test 
					phase. I.e. start the container in pre-integration-test and stop it in post-integration-test. -->
				<executions>
					<execution>
						<id>start</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>remove</goal>
							<goal>build</goal>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
					<execution>
						<id>push</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
							<goal>remove</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.18.1</version>
				<configuration>
					<includes>
						<include>**/*Spec.java</include>
					</includes>
					<systemProperties>
						<wshost>${wshost}</wshost>
						<wsport>${wsport}</wsport>
						<wsname>${project.artifactId}</wsname>
					</systemProperties>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>


</project>

